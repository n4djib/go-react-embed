go mod init go-react-embed

go get github.com/labstack/echo/v4
go get github.com/labstack/echo/v4/middleware@v4.12.0

npm create vite

package.json
  "scripts": {
    "dev": "vite dev --port 8081",
    "build-watch": "tsc && vite build --watch",
    "build": "tsc && vite build",


go install github.com/cosmtrek/air@latest

air init



== i Run the project in two Consols
cd frontend
npm run build

air


== add tailwind css
npm install -D tailwindcss postcss autoprefixer

npx tailwindcss init -p


npm i @material-tailwind/react
npm i -D @types/react@18.2.42


== tanstack router
npm install @tanstack/react-router
npm install --save-dev @tanstack/router-vite-plugin 
npm install --save-dev @tanstack/router-devtools


== ENV
go get github.com/joho/godotenv




npm i echarts-for-react


== DB
go get github.com/mattn/go-sqlite3


npm install lucide-react



== tanstack react-query
npm i @tanstack/react-query


=to fix env process type
npm i --save-dev @types/node
npm i @tanstack/react-query-devtools


== SQLC
go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
  installed it as administrator
    and then copied the file to 
      C:\Users\sona22866\go\bin

sqlc generate


go get github.com/go-playground/validator/v10


== generate keys
"C:\Program Files\OpenSSL-Win64\bin\openssl" req -x509 -newkey rsa:2048 -nodes -keyout server.key -out server.crt -days 365



gofmt -d main.go    // display
gofmt -w main.go    // overwrite

go get -u golang.org/x/lint/golint
    installed but didn't work




== Authentication
go get golang.org/x/crypto/bcrypt
go get github.com/golang-jwt/jwt/v5



go get github.com/google/uuid


== swagger
go install github.com/swaggo/swag/cmd/swag@latest

swag init

go get -u github.com/swaggo/echo-swagger







==================
      - database file should be embeded in exe (as a starting db)
          and copied to drive if not existing
          maybe do the same for ENV file
      - script to build react when building GO
      - create AUTH system
      - auth roles
      - sanitize input
          it seems like sqlc is fine
- add email
    email verification
    but this app is deployed locally, so i don't need the email
- config options when starting the app
    CLI interactions
    set user password
- validate env variables
- Badger & Bolt
    LMDB in memory is faster
- maybe store more info in other cookies
    no need, i am using Whoami
- try to serve the pages statically only in production
    embed only in production
- swagger
- 404 not found page in react router
- maybe relative routes in react 
- 
- 
- 
- 
- 

===================
go env
  to show GO env settings

cd frontend && npm run build && cd.. && go build
